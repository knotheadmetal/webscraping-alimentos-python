import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import re

def clean_price(price_str):
    """
    Limpa e converte string de pre√ßo para float
    """
    if pd.isna(price_str) or price_str == "N/A":
        return np.nan
    
    # Remove 'R$' e espa√ßos, substitui ',' por '.'
    cleaned = re.sub(r'R\$\s*', '', str(price_str))
    cleaned = cleaned.replace(',', '.')
    
    try:
        return float(cleaned)
    except ValueError:
        return np.nan

def categorize_product(product_name):
    """
    Categoriza produtos por tipo de alimento
    """
    product_lower = product_name.lower()
    
    if 'arroz' in product_lower:
        return 'Arroz'
    elif 'feij√£o' in product_lower or 'feijao' in product_lower:
        return 'Feij√£o'
    elif 'leite' in product_lower:
        return 'Leite'
    elif 'carne' in product_lower:
        return 'Carne'
    elif 'p√£o' in product_lower or 'pao' in product_lower:
        return 'P√£o'
    elif '√≥leo' in product_lower or 'oleo' in product_lower:
        return '√ìleo'
    elif 'ovos' in product_lower or 'ovo' in product_lower:
        return 'Ovos'
    else:
        return 'Outros'

def analyze_and_visualize(file_path="data/precos_mercados.csv"):
    """
    Realiza an√°lise comparativa de pre√ßos e gera visualiza√ß√µes
    """
    try:
        df = pd.read_csv(file_path)
        print(f"Dados carregados: {len(df)} produtos encontrados")
    except FileNotFoundError:
        print(f"Erro: O arquivo {file_path} n√£o foi encontrado.")
        return
    
    # Limpeza e convers√£o de dados
    df['Pre√ßo_Limpo'] = df['Pre√ßo'].apply(clean_price)
    df['Categoria'] = df['Produto'].apply(categorize_product)
    
    # Remove produtos sem pre√ßo v√°lido
    df_clean = df.dropna(subset=['Pre√ßo_Limpo'])
    
    print(f"\nDados ap√≥s limpeza: {len(df_clean)} produtos v√°lidos")
    print(f"Supermercados analisados: {', '.join(df_clean['Supermercado'].unique())}")
    print(f"Categorias encontradas: {', '.join(df_clean['Categoria'].unique())}")
    
    # An√°lise estat√≠stica por categoria
    print("\n" + "="*60)
    print("AN√ÅLISE COMPARATIVA DE PRE√áOS POR CATEGORIA")
    print("="*60)
    
    analysis_by_category = df_clean.groupby('Categoria')['Pre√ßo_Limpo'].agg([
        ('M√©dia', 'mean'),
        ('Menor_Pre√ßo', 'min'),
        ('Maior_Pre√ßo', 'max'),
        ('Desvio_Padr√£o', 'std'),
        ('Quantidade', 'count')
    ]).round(2)
    
    print(analysis_by_category)
    
    # An√°lise por supermercado
    print("\n" + "="*60)
    print("AN√ÅLISE COMPARATIVA POR SUPERMERCADO")
    print("="*60)
    
    analysis_by_market = df_clean.groupby('Supermercado')['Pre√ßo_Limpo'].agg([
        ('Pre√ßo_M√©dio', 'mean'),
        ('Menor_Pre√ßo', 'min'),
        ('Maior_Pre√ßo', 'max'),
        ('Quantidade_Produtos', 'count')
    ]).round(2)
    
    print(analysis_by_market)
    
    # Configura√ß√£o de estilo para os gr√°ficos
    plt.style.use('default')
    sns.set_palette("husl")
    
    # Gr√°fico 1: Comparativo de pre√ßos m√©dios por categoria e supermercado
    plt.figure(figsize=(14, 8))
    
    # Calcular pre√ßos m√©dios por categoria e supermercado
    avg_prices = df_clean.groupby(['Categoria', 'Supermercado'])['Pre√ßo_Limpo'].mean().reset_index()
    
    sns.barplot(data=avg_prices, x='Categoria', y='Pre√ßo_Limpo', hue='Supermercado')
    plt.title('Comparativo de Pre√ßos M√©dios por Categoria e Supermercado', fontsize=16, fontweight='bold')
    plt.xlabel('Categoria de Produto', fontsize=12)
    plt.ylabel('Pre√ßo M√©dio (R$)', fontsize=12)
    plt.xticks(rotation=45, ha='right')
    plt.legend(title='Supermercado', loc='upper left')
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()
    plt.savefig('precos_por_categoria_supermercado.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # Gr√°fico 2: Distribui√ß√£o de pre√ßos por supermercado
    plt.figure(figsize=(12, 6))
    
    sns.boxplot(data=df_clean, x='Supermercado', y='Pre√ßo_Limpo')
    plt.title('Distribui√ß√£o de Pre√ßos por Supermercado', fontsize=16, fontweight='bold')
    plt.xlabel('Supermercado', fontsize=12)
    plt.ylabel('Pre√ßo (R$)', fontsize=12)
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()
    plt.savefig('distribuicao_precos_supermercado.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # Gr√°fico 3: Comparativo de pre√ßos por categoria (violin plot)
    plt.figure(figsize=(14, 8))
    
    sns.violinplot(data=df_clean, x='Categoria', y='Pre√ßo_Limpo', hue='Supermercado')
    plt.title('Distribui√ß√£o Detalhada de Pre√ßos por Categoria', fontsize=16, fontweight='bold')
    plt.xlabel('Categoria de Produto', fontsize=12)
    plt.ylabel('Pre√ßo (R$)', fontsize=12)
    plt.xticks(rotation=45, ha='right')
    plt.legend(title='Supermercado', loc='upper left')
    plt.grid(axis='y', alpha=0.3)
    plt.tight_layout()
    plt.savefig('distribuicao_detalhada_precos.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # An√°lise de economia potencial
    print("\n" + "="*60)
    print("AN√ÅLISE DE ECONOMIA POTENCIAL")
    print("="*60)
    
    economy_analysis = []
    for category in df_clean['Categoria'].unique():
        category_data = df_clean[df_clean['Categoria'] == category]
        if len(category_data['Supermercado'].unique()) > 1:
            avg_by_market = category_data.groupby('Supermercado')['Pre√ßo_Limpo'].mean()
            cheapest_market = avg_by_market.idxmin()
            most_expensive_market = avg_by_market.idxmax()
            potential_savings = avg_by_market.max() - avg_by_market.min()
            savings_percentage = (potential_savings / avg_by_market.max()) * 100
            
            economy_analysis.append({
                'Categoria': category,
                'Mais_Barato': cheapest_market,
                'Pre√ßo_M√©dio_Menor': round(avg_by_market.min(), 2),
                'Mais_Caro': most_expensive_market,
                'Pre√ßo_M√©dio_Maior': round(avg_by_market.max(), 2),
                'Economia_Potencial': round(potential_savings, 2),
                'Economia_Percentual': round(savings_percentage, 1)
            })
    
    economy_df = pd.DataFrame(economy_analysis)
    print(economy_df.to_string(index=False))
    
    # Salvar an√°lises em arquivo
    with open('analise_precos_resultado.txt', 'w', encoding='utf-8') as f:
        f.write("RELAT√ìRIO DE AN√ÅLISE DE PRE√áOS DE ALIMENTOS B√ÅSICOS\n")
        f.write("="*60 + "\n\n")
        
        f.write("RESUMO EXECUTIVO:\n")
        f.write(f"- Total de produtos analisados: {len(df_clean)}\n")
        f.write(f"- Supermercados comparados: {', '.join(df_clean['Supermercado'].unique())}\n")
        f.write(f"- Categorias analisadas: {', '.join(df_clean['Categoria'].unique())}\n\n")
        
        f.write("AN√ÅLISE POR CATEGORIA:\n")
        f.write(analysis_by_category.to_string())
        f.write("\n\n")
        
        f.write("AN√ÅLISE POR SUPERMERCADO:\n")
        f.write(analysis_by_market.to_string())
        f.write("\n\n")
        
        f.write("OPORTUNIDADES DE ECONOMIA:\n")
        f.write(economy_df.to_string(index=False))
        f.write("\n\n")
        
        f.write("CONCLUS√ïES:\n")
        f.write("Este projeto demonstra como o web scraping pode ser usado para promover\n")
        f.write("transpar√™ncia de pre√ßos e ajudar consumidores a tomar decis√µes mais\n")
        f.write("informadas sobre suas compras de alimentos b√°sicos.\n")
    
    print(f"\n‚úÖ An√°lise completa salva em 'analise_precos_resultado.txt'")
    print(f"‚úÖ Gr√°ficos salvos como PNG na pasta atual")
    
    return df_clean

if __name__ == "__main__":
    df_result = analyze_and_visualize()
    print("\nüéâ An√°lise conclu√≠da com sucesso!")

